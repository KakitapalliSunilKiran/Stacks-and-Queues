Stack :
==========
Stack follows the principal of Last in First out

Shortened it will be called as LIFO (Last in First Out)
========================================================
Famous examples are

1. watsapp chat history
2. watsapp status history
3. In school days student note books
=======================================================
In technical way recusrsion follows stack 
calling functions in a chain way follows stack principal 


Now we need to replicate stack functionality :
===============================================
using array we need to replicate stack functionalitu

8.21 to 8.30

Push
pop
peek getting peek element
=================================
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class Main {
    static int top =-1;
    static int arr[]=new int[5];
    public static void main(String[] args) {
        System.out.println("Try programiz.pro");
        while(true){
            int opt=new Scanner(System.in).nextInt();
            switch(opt){
                case 1:
                    push(10);
                    break;
                case 2:
                    pop();
                    break;
                case 3:
                    display();
                    break;
            }
        }
        
    }
    static void push(int x){
        top++;
        arr[top]=x;
    }
    static int pop(){
        int x= arr[top];
        top--;
        return x;
    }
    
    static void display(){
        for(int i=top;i>=0;i--){
            System.out.print(arr[i]+" ");
        }
    }
    
}
==========================================================
Queue:
===========

Queue follows principal first in first out

Can you give some practical examples of Queue

text messages
information will go in packets 
Booked movie tickets at cinema Hall
==========================================================
Prcatical implemenation :
================================
1.Enque

2.Deque

3.display
================================
class Queue {
    private int[] arr;   // Array to store queue elements
    private int front;   // Index of the front element
    private int rear;    // Index of the last element
    private int size;    // Current size of the queue
    private int capacity; // Maximum capacity of the queue

    // Constructor to initialize the queue
    public Queue(int capacity) {
        this.capacity = capacity;
        arr = new int[capacity];
        front = -1;
        rear = -1;
        size = 0;
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Check if the queue is full
    public boolean isFull() {
        return size == capacity;
    }

    // Enqueue operation (add an element to the rear of the queue)
    public void enqueue(int value) {
        if (isFull()) {
            System.out.println("Queue is full!");
            return;
        }

        // If the queue is empty, set front to 0
        if (front == -1) {
            front = 0;
        }

        // Move rear to the next position (circular)
        rear = (rear + 1) % capacity;
        arr[rear] = value;  // Add the new element to the rear
        size++;             // Increment the size of the queue
        System.out.println("Enqueued: " + value);
    }

//f=4 r=4 
//    50

    // Dequeue operation (remove an element from the front of the queue)
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty!");
            return -1;  // Return a sentinel value for an empty queue
        }

        int dequeuedValue = arr[front];

        // If there is only one element, reset the queue
        if (front == rear) {
            front = rear = -1;
        } else {
            // Move front to the next position (circular)
            front = (front + 1) % capacity;
        }

        size--;  // Decrement the size of the queue
        return dequeuedValue;
    }

    // Display the elements of the queue
    public void displayQueue() {
        if (isEmpty()) {
            System.out.println("Queue is empty!");
            return;
        }

        System.out.print("Queue: ");
        for (int i = 0; i < size; i++) {
            // Print elements in the queue from front to rear (circular)
            System.out.print(arr[(front + i) % capacity] + " ");
        }
        System.out.println();
    }
}

public class QueueExample {
    public static void main(String[] args) {
        Queue queue = new Queue(5);  // Create a queue with capacity 5

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.displayQueue();  // Expected: 10 20 30

        System.out.println("Dequeued: " + queue.dequeue());  // Expected: 10
        queue.displayQueue();  // Expected: 20 30

        queue.enqueue(40);
        queue.enqueue(50);
        queue.enqueue(60);  // This will print "Queue is full!"
        queue.displayQueue();  // Expected: 20 30 40 50
    }
}
=============================================================================================



)[]{}

2. if you encountorere closing brace when the stack is empty the return false
1. When ever you encounter an opening brace push on to the Stack
2. When ever you encounter a closing brace what is peak element popout that
3. After processing whole string if your Stack is empty then String is Balanced

(]{}
=============================================================================================
//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*; 
class GFG{
    public static void main(String args[]) throws IOException { 
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());
        while(t-- > 0){
            String S = sc.nextLine().trim();
            Solution ob = new Solution();
            if(ob.valid(S))
                System.out.println(1);
            else
                System.out.println(0);
        
System.out.println("~");
}
    }
}
// } Driver Code Ends


//User function Template for Java
class Solution 
{ 
    boolean valid(String str) 
    { 
        // code here
        Stack<Character> s=new Stack<>();
        for(int i=0;i<str.length();i++)
        {
            Character ch=str.charAt(i);
            if(s.isEmpty() && (ch==')' || ch==']' || ch=='}'))
            {
                return false;
            }
            else if(ch==')' || ch==']' || ch=='}')
            {
                
                if(ch==')'){
                    if(s.peek()=='('){
                        s.pop();
                    }else{
                        return false;
                    }
                }
                
                if(ch==']'){
                    if(s.peek()=='['){
                        s.pop();
                    }else{
                        return false;
                    }
                }
                
                if(ch=='}')
                {
                    if(s.peek()=='{')
                    {
                            s.pop();
                        }else{
                            return false;
                        }
                    
               }
                
            }else{
                s.push(ch);
            }
        }
     
        
        if(s.isEmpty())
        {
            return true;
        }
        else
        {
            return false;
        }
        
    }
} 

=================================================================
//Asteroid collison

class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stack=new Stack<>();   
        boolean found=false;
        for(int i=0;i<asteroids.length;i++){
            int x=asteroids[i];
            found=false;
            while(!stack.isEmpty() && x<0 && stack.peek()>0){
                if(stack.peek()>Math.abs(x)){
                    break;
                }else if(stack.peek()<Math.abs(x)){
                    stack.pop();
                }else{
                    stack.pop();
                    found=true;
                    break;
                }
            }
            if(found==false){
                if(stack.isEmpty() || x>0 || stack.peek()<0){
                    stack.push(x);
                }
            }
        }
        int c=0;
        int ans[]=new int[stack.size()];
        for(Integer i:stack){
            ans[c]=i;
            c++;
        }
        return ans;
    }
}
======================================================================
Next Greater Element

class Solution {
    // Function to find the next greater element for each element of the array.
    public ArrayList<Integer> nextLargerElement(int[] arr) {
        // code here
        ArrayList<Integer> al=new ArrayList<>();
        Stack<Integer> s=new Stack<>();
        for(int i=arr.length-1;i>=0;i--){
            int x=arr[i];
            while(!s.isEmpty() && x>=s.peek()){
                s.pop();
            }
            if(s.isEmpty()){
                al.add(-1);
            }else{
                al.add(s.peek());
            }
           
            s.push(x);
        }
        Collections.reverse(al);
        return al;
       
    }
}
========================================
Least Greater Element
import java.util.* ;
import java.io.*; 
public class Solution {
    public static int[] leastGreaterElement(int[] arr) {
        // Write your code here
        ArrayList<Integer> al=new ArrayList<>();
        Stack<Integer> s=new Stack<>();
        int min=Integer.MAX_VALUE;
        boolean found=false;
        for(int i=arr.length-1;i>=0;i--){
            found=false;
            min=Integer.MAX_VALUE;
            int x=arr[i];
           
            for(Integer k:s){
                if(x<k){
                   if(k<min){
                       found=true;
                       min=k;
                   }
                }
            }

            if(s.isEmpty()){
                al.add(-1);
            }else{
                if(found==false){
                    al.add(-1);
                }else{
                 al.add(min);
                }
            }
            s.push(x);
        }
        Collections.reverse(al);
        int arr1[]=new int[al.size()];
        int j=0;
        for(Integer i:al){
            arr1[j]=i;
            j++;
        }
        return arr1;
    }
}
==============================================================
//Sum of Subarray minimum

import java.util.Stack;

public class SumOfSubarrayMinimums {
    public static int sumOfSubarrayMinimums(int[] arr) {
        int n = arr.length;
        int mod = 1_000_000_007; // To handle large numbers
        Stack<Integer> stack = new Stack<>();
        long sum = 0;

        // Arrays to store the previous less element index and next less element index
        int[] prevLess = new int[n];
        int[] nextLess = new int[n];

        // Finding the previous less element for each index
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            prevLess[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        // Clear the stack to use it for the next less element computation
        stack.clear();

        // Finding the next less element for each index
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            nextLess[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }

        // Calculating the sum of subarray minimums
        for (int i = 0; i < n; i++) {
            long contribution = (long) (i - prevLess[i]) * (nextLess[i] - i) % mod;
            contribution = (contribution * arr[i]) % mod;
            sum = (sum + contribution) % mod;
        }

        return (int) sum;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 2, 4};
        System.out.println("Sum of subarray minimums: " + sumOfSubarrayMinimums(arr));
    }
}
===========================================================================================================
Smaller on Left

class Solution{
    static List<Integer> leftSmaller(int n, int a[])
    {
        //code here
        Stack<Integer> stack=new Stack<>();
        ArrayList<Integer> al=new ArrayList<>();
        for(int i=0;i<n;i++){
            int x=arr[i];
            while(!stack.isEmpty() && x<stack.peek()){
                stack.pop();
            }
            if(stack.isEmpty()){
                al.add(-1);
            }else{
                al.add(stack.peek());
            }
            stack.push(x);
        }
        return al;
    }
}
=============================================================
Help Classmates
class Solution {
	public static int[] help_classmate(int arr[], int n) 
	{ 
	    // Your code goes here
	    Stack<Integer> stack = new Stack<Integer>();
	    ArrayList<Integer> al = new ArrayList<>();
	    for(int i=n-1;i>=0;i--){
	        int x=arr[i];
	        while(!stack.isEmpty() && x<=stack.peek()){
	            stack.pop();
	        }
	        if(stack.isEmpty()){
	            al.add(-1);
	        }else{
	            al.add(stack.peek());
	        }
	        stack.push(x);
	    }
	    Collections.reverse(al);
	    
	    for(int i=0;i<n;i++){
	        arr[i]=al.get(i);
	    }
	    return arr;
	        
	} 
}
============================================================


































